%PDF-1.4
%“Œ‹ž ReportLab Generated PDF document http://www.reportlab.com
1 0 obj
<<
/F1 2 0 R /F2 3 0 R /F3 4 0 R /F4 8 0 R /F5 10 0 R
>>
endobj
2 0 obj
<<
/BaseFont /Helvetica /Encoding /WinAnsiEncoding /Name /F1 /Subtype /Type1 /Type /Font
>>
endobj
3 0 obj
<<
/BaseFont /Helvetica-Bold /Encoding /WinAnsiEncoding /Name /F2 /Subtype /Type1 /Type /Font
>>
endobj
4 0 obj
<<
/BaseFont /Courier /Encoding /WinAnsiEncoding /Name /F3 /Subtype /Type1 /Type /Font
>>
endobj
5 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://en.wikipedia.org/wiki/Reverse_Polish_notation)
>> /Border [ 0 0 0 ] /Rect [ 264.6829 476.0236 365.8329 488.0236 ] /Subtype /Link /Type /Annot
>>
endobj
6 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://stackoverflow.com/questions/39002052/how-i-can-print-to-stderr-in-c)
>> /Border [ 0 0 0 ] /Rect [ 124.79 203.0236 190.7386 215.0236 ] /Subtype /Link /Type /Annot
>>
endobj
7 0 obj
<<
/Annots [ 5 0 R 6 0 R ] /Contents 30 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 29 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
8 0 obj
<<
/BaseFont /Helvetica-BoldOblique /Encoding /WinAnsiEncoding /Name /F4 /Subtype /Type1 /Type /Font
>>
endobj
9 0 obj
<<
/Contents 31 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 29 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 /Trans <<

>> 
  /Type /Page
>>
endobj
10 0 obj
<<
/BaseFont /Helvetica-Oblique /Encoding /WinAnsiEncoding /Name /F5 /Subtype /Type1 /Type /Font
>>
endobj
11 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://github.com/google/sanitizers/wiki/AddressSanitizer)
>> /Border [ 0 0 0 ] /Rect [ 130.9509 289.0236 206.7935 301.0236 ] /Subtype /Link /Type /Annot
>>
endobj
12 0 obj
<<
/A <<
/S /URI /Type /Action /URI (http://valgrind.org/docs/manual/quick-start.html#quick-start.intro)
>> /Border [ 0 0 0 ] /Rect [ 258.1615 289.0236 293.1715 301.0236 ] /Subtype /Link /Type /Annot
>>
endobj
13 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://www.youtube.com/watch?v=FNZ5o9S9prU)
>> /Border [ 0 0 0 ] /Rect [ 85.69291 82.77362 252.8629 94.77362 ] /Subtype /Link /Type /Annot
>>
endobj
14 0 obj
<<
/Annots [ 11 0 R 12 0 R 13 0 R ] /Contents 32 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 29 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
15 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://en.wikibooks.org/wiki/A-level_Computing/AQA/Paper_1/Fundamentals_of_data_structures/Stacks)
>> /Border [ 0 0 0 ] /Rect [ 85.69291 750.7736 317.4429 762.7736 ] /Subtype /Link /Type /Annot
>>
endobj
16 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://www.youtube.com/watch?v=LQ-iW8jm6Mk)
>> /Border [ 0 0 0 ] /Rect [ 85.69291 732.7736 217.4129 744.7736 ] /Subtype /Link /Type /Annot
>>
endobj
17 0 obj
<<
/A <<
/S /URI /Type /Action /URI (https://en.wikipedia.org/wiki/Shunting-yard_algorithm)
>> /Border [ 0 0 0 ] /Rect [ 85.69291 714.7736 278.7729 726.7736 ] /Subtype /Link /Type /Annot
>>
endobj
18 0 obj
<<
/Annots [ 15 0 R 16 0 R 17 0 R ] /Contents 33 0 R /MediaBox [ 0 0 595.2756 841.8898 ] /Parent 29 0 R /Resources <<
/Font 1 0 R /ProcSet [ /PDF /Text /ImageB /ImageC /ImageI ]
>> /Rotate 0 
  /Trans <<

>> /Type /Page
>>
endobj
19 0 obj
<<
/Outlines 21 0 R /PageLabels 34 0 R /PageMode /UseNone /Pages 29 0 R /Type /Catalog
>>
endobj
20 0 obj
<<
/Author () /CreationDate (D:20200202215411+00'00') /Creator (\(unspecified\)) /Keywords () /ModDate (D:20200202215411+00'00') /Producer (ReportLab PDF Library - www.reportlab.com) 
  /Subject (\(unspecified\)) /Title (Assignment 1: Reverse-Polish Notation) /Trapped /False
>>
endobj
21 0 obj
<<
/Count 7 /First 22 0 R /Last 28 0 R /Type /Outlines
>>
endobj
22 0 obj
<<
/Dest [ 7 0 R /XYZ 62.69291 689.0236 0 ] /Next 23 0 R /Parent 21 0 R /Title (Objectives)
>>
endobj
23 0 obj
<<
/Dest [ 7 0 R /XYZ 62.69291 626.0236 0 ] /Next 24 0 R /Parent 21 0 R /Prev 22 0 R /Title (Requirements)
>>
endobj
24 0 obj
<<
/Dest [ 7 0 R /XYZ 62.69291 377.0236 0 ] /Next 25 0 R /Parent 21 0 R /Prev 23 0 R /Title (Details on the input and output formats)
>>
endobj
25 0 obj
<<
/Dest [ 9 0 R /XYZ 62.69291 487.8236 0 ] /Next 26 0 R /Parent 21 0 R /Prev 24 0 R /Title (Automated Testing)
>>
endobj
26 0 obj
<<
/Dest [ 9 0 R /XYZ 62.69291 358.8236 0 ] /Next 27 0 R /Parent 21 0 R /Prev 25 0 R /Title (Getting started)
>>
endobj
27 0 obj
<<
/Dest [ 14 0 R /XYZ 62.69291 691.0236 0 ] /Next 28 0 R /Parent 21 0 R /Prev 26 0 R /Title (Grading)
>>
endobj
28 0 obj
<<
/Dest [ 14 0 R /XYZ 62.69291 130.0236 0 ] /Parent 21 0 R /Prev 27 0 R /Title (Reference links)
>>
endobj
29 0 obj
<<
/Count 4 /Kids [ 7 0 R 9 0 R 14 0 R 18 0 R ] /Type /Pages
>>
endobj
30 0 obj
<<
/Length 8643
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 741.0236 cm
q
BT 1 0 0 1 0 4 Tm 47.68488 0 Td 24 TL /F2 20 Tf 0 0 0 rg (Assignment 1: Reverse-Polish Notation) Tj T* -47.68488 0 Td ET
Q
Q
q
1 0 0 1 62.69291 716.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 48.03937 0 Td (Date:) Tj T* -48.03937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (To be determined) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 701.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F2 10 Tf 12 TL 28.02937 0 Td (Deadline:) Tj T* -28.02937 0 Td ET
Q
Q
q
1 0 0 1 91.03937 3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (To be determined) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 668.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Objectives) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 638.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .127318 Tw (You must implement a stack API and a conversion program that converts between two notational systems) Tj T* 0 Tw (for mathematical expressions.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 605.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Requirements) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 539.0236 cm
q
BT 1 0 0 1 0 50 Tm 1.661235 Tw 12 TL /F1 10 Tf 0 0 0 rg (You should implement the stack API described in the ) Tj /F3 10 Tf 0 0 0 rg (stack.h) Tj /F1 10 Tf 0 0 0 rg ( file. This data structure has not been) Tj T* 0 Tw .566303 Tw (covered in the lectures yet, but it is easy enough to understand. Note that for this assignment the size of) Tj T* 0 Tw .441488 Tw (the stack is limited to a fixed number, which is also defined in the ) Tj /F3 10 Tf 0 0 0 rg (stack.h) Tj /F1 10 Tf 0 0 0 rg ( file. If you are unfamiliar with) Tj T* 0 Tw .772093 Tw (stacks, check out the reference links at the end of the assignment. This part of the assignment will be a) Tj T* 0 Tw (general implementation to store integers in a stack data structure.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 497.0236 cm
q
BT 1 0 0 1 0 26 Tm .047633 Tw 12 TL /F1 10 Tf 0 0 0 rg (Next, you should use this stack to store characters as part of a RPN conversion program. Your conversion) Tj T* 0 Tw 2.32152 Tw (program must be named ) Tj /F3 10 Tf 0 0 0 rg (infix2rpn) Tj /F1 10 Tf 0 0 0 rg ( and must accept a single mathematical expression using infix) Tj T* 0 Tw (notation on the command-line, and output the following:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 491.0236 cm
Q
q
1 0 0 1 62.69291 491.0236 cm
Q
q
1 0 0 1 62.69291 479.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (on standard output, its representation in ) Tj 0 0 .501961 rg (reverse-polish notation) Tj 0 0 0 rg (.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 473.0236 cm
Q
q
1 0 0 1 62.69291 449.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm .778651 Tw 12 TL /F1 10 Tf 0 0 0 rg (then, on standard error, a summary of the stack operations needed to perform the conversion. The) Tj T* 0 Tw (difference between standard output and standard error will be explained in the C lectures.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 449.0236 cm
Q
q
1 0 0 1 62.69291 419.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.416303 Tw (The program must terminate with exit code 1 if it encounters an invalid input, and exit code 0 when it) Tj T* 0 Tw (succeeds.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 389.0236 cm
q
BT 1 0 0 1 0 14 Tm .059987 Tw 12 TL /F1 10 Tf 0 0 0 rg (You must submit your work as a tarball. The command ) Tj /F3 10 Tf 0 0 0 rg (make) Tj ( ) Tj (tarball) Tj /F1 10 Tf 0 0 0 rg ( will create a tarball for you named) Tj T* 0 Tw /F3 10 Tf 0 0 0 rg (infix2rpn_submit.tar.gz) Tj /F1 10 Tf 0 0 0 rg (.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 356.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Details on the input and output formats) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 344.0236 cm
Q
q
1 0 0 1 62.69291 344.0236 cm
Q
q
1 0 0 1 62.69291 260.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 69 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 69 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Input infix expressions are formed using the following rules:) Tj T* ET
Q
Q
q
1 0 0 1 23 63 cm
Q
q
1 0 0 1 23 63 cm
Q
q
1 0 0 1 23 51 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (a non-empty sequence of decimal digits forms an expression.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 23 45 cm
Q
q
1 0 0 1 23 33 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (two expressions separated by a binary operator ) Tj /F3 10 Tf 0 0 0 rg (+) Tj /F1 10 Tf 0 0 0 rg ( ) Tj /F3 10 Tf 0 0 0 rg (-) Tj /F1 10 Tf 0 0 0 rg ( ) Tj /F3 10 Tf 0 0 0 rg (*) Tj /F1 10 Tf 0 0 0 rg ( ) Tj /F3 10 Tf 0 0 0 rg (/) Tj /F1 10 Tf 0 0 0 rg ( form an expression.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 23 27 cm
Q
q
1 0 0 1 23 15 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (one expression between parentheses ) Tj /F3 10 Tf 0 0 0 rg (\() Tj /F1 10 Tf 0 0 0 rg ( ) Tj /F3 10 Tf 0 0 0 rg (\)) Tj /F1 10 Tf 0 0 0 rg ( forms an expression.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 23 9 cm
Q
q
1 0 0 1 23 -3 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (spaces surrounding operators, operands or parentheses are meaningless and can be ignored.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 23 -3 cm
Q
q
Q
Q
q
1 0 0 1 62.69291 254.0236 cm
Q
q
1 0 0 1 62.69291 242.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Your program must support proper precedence: ) Tj /F3 10 Tf 0 0 0 rg (3*1+2) Tj /F1 10 Tf 0 0 0 rg ( and ) Tj /F3 10 Tf 0 0 0 rg (3*\(1+2\)) Tj /F1 10 Tf 0 0 0 rg ( are different!) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 236.0236 cm
Q
q
1 0 0 1 62.69291 224.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Output RPN expressions are a space-delimited sequence of operators and non-operators.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 218.0236 cm
Q
q
1 0 0 1 62.69291 140.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 63 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 51 cm
q
BT 1 0 0 1 0 14 Tm 3.148555 Tw 12 TL /F1 10 Tf 0 0 0 rg (On the ) Tj 0 0 .501961 rg (standard error) Tj 0 0 0 rg (, the program must print the word ") Tj /F3 10 Tf 0 0 0 rg (stats) Tj /F1 10 Tf 0 0 0 rg (" followed by three numbers) Tj T* 0 Tw (separated by spaces, in this order:) Tj T* ET
Q
Q
q
1 0 0 1 23 45 cm
Q
q
1 0 0 1 23 45 cm
Q
q
1 0 0 1 23 33 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (the total number of stack "push" operations;) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 23 27 cm
Q
q
1 0 0 1 23 15 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (the total number of stack "pop" operations;) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 23 9 cm
Q
q
1 0 0 1 23 -3 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (the ) Tj /F2 10 Tf (maximum) Tj /F1 10 Tf ( size of the stack during the conversion.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 23 -3 cm
Q
q
Q
Q
q
1 0 0 1 62.69291 140.0236 cm
Q
q
1 0 0 1 62.69291 122.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Example:) Tj T* ET
Q
Q
 
endstream
endobj
31 0 obj
<<
/Length 6244
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 499.8236 cm
q
q
1 0 0 1 0 0 cm
q
1 0 0 1 6.6 6.6 cm
q
.662745 .662745 .662745 RG
.5 w
.960784 .960784 .862745 rg
n -6 -6 468.6898 264 re B*
Q
q
BT 1 0 0 1 0 242 Tm 12 TL /F3 10 Tf 0 0 0 rg ($ ./infix2rpn "3+2") Tj T* (3 2 +) Tj T* (stats 1 1 1) Tj T*  T* (# Exit code is 0 in case of success.) Tj T* ($ ./infix2rpn "\(3+2\)/3"; echo $?) Tj T* (3 2 + 3 /) Tj T* (stats 3 3 2) Tj T* (0) Tj T*  T* (# Results go to stdout.) Tj T* ($ ./infix2rpn "\(3+2\)/3"  2) Tj (>) Tj ( /dev/null) Tj T* (3 2 + 3 /) Tj T*  T* (# Stats go to stderr.) Tj T* ($ ./infix2rpn "\(3+2\)/3"  ) Tj (>) Tj ( /dev/null) Tj T* (stats 3 3 2) Tj T*  T* (# Checking that the exit status is correct in case of error) Tj T* ($ ./infix2rpn "blabla"  ) Tj (>) Tj ( /dev/null 2) Tj (>) Tj (&) Tj (1; echo $?) Tj T* (1) Tj T* ET
Q
Q
Q
Q
Q
q
1 0 0 1 62.69291 466.8236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Automated Testing) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 412.8236 cm
q
BT 1 0 0 1 0 38 Tm -0.050602 Tw 12 TL /F1 10 Tf 0 0 0 rg (The correctness of your programs will be determined by automatic grading scripts. To help you get used to) Tj T* 0 Tw 4.198221 Tw (this, part of the scripts for this week have also been provided. You can test your stack with) Tj T* 0 Tw 2.464269 Tw /F3 10 Tf 0 0 0 rg (check_stack.c) Tj /F1 10 Tf 0 0 0 rg (, which contains a set of testcases for just the data structure functions. The script) Tj T* 0 Tw /F3 10 Tf 0 0 0 rg (check_infix2rpn.sh) Tj /F1 10 Tf 0 0 0 rg ( contains some of the grading checks that will be run on your code.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 370.8236 cm
q
BT 1 0 0 1 0 26 Tm .910542 Tw 12 TL /F1 10 Tf 0 0 0 rg (The command ) Tj /F3 10 Tf 0 0 0 rg (make) Tj ( ) Tj (check) Tj /F1 10 Tf 0 0 0 rg ( will run all these tests in order. Note that only half of the requirements are) Tj T* 0 Tw .11436 Tw (tested here, and you should add your own tests in ) Tj /F3 10 Tf 0 0 0 rg (test_expressions.sh) Tj /F1 10 Tf 0 0 0 rg ( in order to verify all elements) Tj T* 0 Tw (of your program function correctly.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 337.8236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Getting started) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 325.8236 cm
Q
q
1 0 0 1 62.69291 325.8236 cm
Q
q
1 0 0 1 62.69291 313.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (1.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Unpack the provided source code archive; then run ) Tj /F3 10 Tf 0 0 0 rg (make) Tj /F1 10 Tf 0 0 0 rg (.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 307.8236 cm
Q
q
1 0 0 1 62.69291 295.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (2.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Try out the generated ) Tj /F3 10 Tf 0 0 0 rg (infix2rpn) Tj /F1 10 Tf 0 0 0 rg ( and understand how input expressions are provided.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 289.8236 cm
Q
q
1 0 0 1 62.69291 277.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (3.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Read the file ) Tj /F3 10 Tf 0 0 0 rg (stack.h) Tj /F1 10 Tf 0 0 0 rg ( and study the interface of functions listed there.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 271.8236 cm
Q
q
1 0 0 1 62.69291 259.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (4.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Implement the data structure in ) Tj /F3 10 Tf 0 0 0 rg (stack.c) Tj /F1 10 Tf 0 0 0 rg ( according to the interface description.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 253.8236 cm
Q
q
1 0 0 1 62.69291 229.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (5.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm .038735 Tw 12 TL /F1 10 Tf 0 0 0 rg (Run ) Tj /F3 10 Tf 0 0 0 rg (make) Tj ( ) Tj (check) Tj /F1 10 Tf 0 0 0 rg ( to see if your stack implementation is correct. Reproduce errors found by the tests) Tj T* 0 Tw (\(you can view the code from each test in ) Tj /F3 10 Tf 0 0 0 rg (check_stack.c) Tj /F1 10 Tf 0 0 0 rg (\) and fix your stack where needed.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 223.8236 cm
Q
q
1 0 0 1 62.69291 211.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (6.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Implement the conversion algorithm in ) Tj /F3 10 Tf 0 0 0 rg (infix2rpn.c) Tj /F1 10 Tf 0 0 0 rg ( and test this with ) Tj /F3 10 Tf 0 0 0 rg (make) Tj ( ) Tj (check) Tj /F1 10 Tf 0 0 0 rg ( too.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 205.8236 cm
Q
q
1 0 0 1 62.69291 181.8236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 5.66 0 Td (7.) Tj T* -5.66 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm .217318 Tw 12 TL /F1 10 Tf 0 0 0 rg (Add tests to ) Tj /F3 10 Tf 0 0 0 rg (test_expressions.sh) Tj /F1 10 Tf 0 0 0 rg ( and check the parts of the assignment that are not covered in) Tj T* 0 Tw (the provided grading script.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 181.8236 cm
Q
q
1 0 0 1 62.69291 169.8236 cm
Q
q
1 0 0 1 62.69291 76.86614 cm
.960784 .960784 .862745 rg
n 0 92.95748 469.8898 -92.95748 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 66.95748 Tm  T* ET
q
1 0 0 1 16 61.95748 cm
q
0 0 0 rg
BT 1 0 0 1 0 2.5 Tm /F4 12.5 Tf 15 TL (Hint) Tj T* ET
Q
Q
q
1 0 0 1 16 25.95748 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.529986 Tw (You will not need to analyze numbers or determine the value of each number on the input. Of) Tj T* 0 Tw .025542 Tw (course, you can do this, but it is not needed to achieve a correct solution. The simple algorithm can) Tj T* 0 Tw ET
Q
Q
q
1 J
1 j
.662745 .662745 .662745 RG
.5 w
n 0 92.95748 m 469.8898 92.95748 l S
n 0 0 m 469.8898 0 l S
n 0 0 m 0 92.95748 l S
n 469.8898 0 m 469.8898 92.95748 l S
Q
Q
 
endstream
endobj
32 0 obj
<<
/Length 10684
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 709.0236 cm
.960784 .960784 .862745 rg
n 0 56 469.8898 -56 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
BT 1 0 0 1 6 30 Tm  T* ET
q
1 0 0 1 16 16 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL .13186 Tw (look at characters individually and then forget about them. Check the links referenced at the end of) Tj T* 0 Tw (the assignment!) Tj T* ET
Q
Q
q
1 J
1 j
.662745 .662745 .662745 RG
.5 w
n 0 56 m 469.8898 56 l S
n 0 0 m 469.8898 0 l S
n 0 0 m 0 56 l S
n 469.8898 0 m 469.8898 56 l S
Q
Q
q
1 0 0 1 62.69291 703.0236 cm
Q
q
1 0 0 1 62.69291 670.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Grading) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 652.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Your grade starts from 0, and the following tests determine your grade:) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 646.0236 cm
Q
q
1 0 0 1 62.69291 646.0236 cm
Q
q
1 0 0 1 62.69291 622.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm .377045 Tw 12 TL /F1 10 Tf 0 0 0 rg (+1pt if you have submitted an archive in the right format, your source code builds without errors and) Tj T* 0 Tw (you have modified both ) Tj /F3 10 Tf 0 0 0 rg (stack.c) Tj /F1 10 Tf 0 0 0 rg ( and ) Tj /F3 10 Tf 0 0 0 rg (infix2rpn.c) Tj /F1 10 Tf 0 0 0 rg ( in any way.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 616.0236 cm
Q
q
1 0 0 1 62.69291 592.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 3.275697 Tw (+1pt if your stack API processes pushes and pops properly and detects stack overflow and) Tj T* 0 Tw (underflow situations.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 586.0236 cm
Q
q
1 0 0 1 62.69291 562.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 2.800751 Tw (+1pt if your converter processes expressions of any length, without parentheses and a single) Tj T* 0 Tw (precedence level, properly.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 556.0236 cm
Q
q
1 0 0 1 62.69291 532.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 3.03498 Tw (+1pt if your converter processes expressions of any length, without parentheses and multiple) Tj T* 0 Tw (precedence levels, properly.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 526.0236 cm
Q
q
1 0 0 1 62.69291 514.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (+0.5pt if your converter detects invalid characters properly and reports a correct exit code.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 508.0236 cm
Q
q
1 0 0 1 62.69291 484.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm 2.220751 Tw 12 TL /F1 10 Tf 0 0 0 rg (-1pt if your code produces any warnings using the flags ) Tj /F3 10 Tf 0 0 0 rg (-Wpedantic) Tj ( ) Tj (-Wall) Tj ( ) Tj (-Wextra) Tj /F1 10 Tf 0 0 0 rg ( when) Tj T* 0 Tw (compiling.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 484.0236 cm
Q
q
1 0 0 1 62.69291 454.0236 cm
q
0 0 0 rg
BT 1 0 0 1 0 14 Tm /F1 10 Tf 12 TL 1.956654 Tw (And the following features are not included in the provided tests at all. You will have to validate the) Tj T* 0 Tw (correctness of these yourself by writing your own tests.) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 448.0236 cm
Q
q
1 0 0 1 62.69291 448.0236 cm
Q
q
1 0 0 1 62.69291 436.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (+1pt if your stack API counts ) Tj /F2 10 Tf (valid) Tj /F1 10 Tf ( operations properly \(number of pushes, pops and max. size\).) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 430.0236 cm
Q
q
1 0 0 1 62.69291 418.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (+0.5pt if your converter properly ignores spaces in the input expressions.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 412.0236 cm
Q
q
1 0 0 1 62.69291 400.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (+1.5pt if your converter processes all expressions including parentheses properly.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 394.0236 cm
Q
q
1 0 0 1 62.69291 382.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (+0.5pt if your converter detects improperly matched parentheses and reports a correct exit code.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 376.0236 cm
Q
q
1 0 0 1 62.69291 340.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 26 Tm 1.599147 Tw 12 TL /F1 10 Tf 0 0 0 rg (+1pt if your converter also supports ) Tj /F5 10 Tf (right-associative) Tj /F1 10 Tf ( exponentiation at a higher precedence level) Tj T* 0 Tw 2.466905 Tw (than multiplication, that is, ) Tj /F3 10 Tf 0 0 0 rg (2*2^3^4) Tj /F1 10 Tf 0 0 0 rg ( is an expression and is equivalent to ) Tj /F3 10 Tf 0 0 0 rg (2*\(2^\(3^4\)\)) Tj /F1 10 Tf 0 0 0 rg (, and) Tj T* 0 Tw (converts it appropriately.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 334.0236 cm
Q
q
1 0 0 1 62.69291 310.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 9 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 14 Tm 3.196412 Tw 12 TL /F1 10 Tf 0 0 0 rg (+1pt if your converter also supports ) Tj /F5 10 Tf (unary negation) Tj /F1 10 Tf ( in front of simple numbers and grouped) Tj T* 0 Tw (expressions using the symbol ) Tj /F3 10 Tf 0 0 0 rg (~) Tj /F1 10 Tf 0 0 0 rg ( \(not ") Tj /F3 10 Tf 0 0 0 rg (-) Tj /F1 10 Tf 0 0 0 rg ("!\), for example ) Tj /F3 10 Tf 0 0 0 rg (~123) Tj /F1 10 Tf 0 0 0 rg ( or ) Tj /F3 10 Tf 0 0 0 rg (~\(3+2\)) Tj /F1 10 Tf 0 0 0 rg (.) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 304.0236 cm
Q
q
1 0 0 1 62.69291 256.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 33 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
BT 1 0 0 1 0 38 Tm .262651 Tw 12 TL /F1 10 Tf 0 0 0 rg (-1pt if the ) Tj 0 0 .501961 rg (address sanitizer) Tj 0 0 0 rg ( or running ) Tj 0 0 .501961 rg (valgrind) Tj 0 0 0 rg ( reports errors while running your converter. ) Tj /F5 10 Tf (Note that) Tj T* 0 Tw .863876 Tw (you cannot test both of these at the same time.) Tj /F1 10 Tf (. The address sanitizer is enabled by default in our) Tj T* 0 Tw 5.259213 Tw (makefile, to generate an executable that you can use with valgrind run the commands) Tj T* 0 Tw /F3 10 Tf 0 0 0 rg (make) Tj ( ) Tj (clean;) Tj ( ) Tj (make) Tj ( ) Tj (valgrind) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 256.0236 cm
Q
q
1 0 0 1 62.69291 238.0236 cm
q
BT 1 0 0 1 0 2 Tm 12 TL /F1 10 Tf 0 0 0 rg (Summary of operators and precedence levels) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 232.0236 cm
Q
q
1 0 0 1 62.69291 142.0236 cm
1 1 1 rg
n 0 90 469.8898 -18 re f*
.878431 .878431 .878431 rg
n 0 72 469.8898 -18 re f*
1 1 1 rg
n 0 54 469.8898 -18 re f*
.878431 .878431 .878431 rg
n 0 36 469.8898 -18 re f*
1 1 1 rg
n 0 18 469.8898 -18 re f*
.960784 .960784 .862745 rg
n 0 90 469.8898 -18 re f*
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 75 cm
q
.960784 .960784 .862745 rg
n 0 0 92.41995 12 re f*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 19.52997 0 Td (Precedence) Tj T* -19.52997 0 Td ET
Q
Q
q
1 0 0 1 110.4199 75 cm
q
.960784 .960784 .862745 rg
n 0 0 222.9449 12 re f*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 91.74244 0 Td (Operator) Tj T* -91.74244 0 Td ET
Q
Q
q
1 0 0 1 345.3648 75 cm
q
.960784 .960784 .862745 rg
n 0 0 118.5249 12 re f*
Q
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 31.75747 0 Td (Associativity) Tj T* -31.75747 0 Td ET
Q
Q
0 0 0 rg
q
1 0 0 1 6 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (1) Tj T* ET
Q
Q
q
1 0 0 1 110.4199 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Negation) Tj T* ET
Q
Q
q
1 0 0 1 345.3648 57 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Right) Tj T* ET
Q
Q
q
1 0 0 1 6 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (2) Tj T* ET
Q
Q
q
1 0 0 1 110.4199 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Exponentiation) Tj T* ET
Q
Q
q
1 0 0 1 345.3648 39 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Right) Tj T* ET
Q
Q
q
1 0 0 1 6 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (3) Tj T* ET
Q
Q
q
1 0 0 1 110.4199 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Division and multiplication) Tj T* ET
Q
Q
q
1 0 0 1 345.3648 21 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Left) Tj T* ET
Q
Q
q
1 0 0 1 6 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (4) Tj T* ET
Q
Q
q
1 0 0 1 110.4199 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Addition and subtraction) Tj T* ET
Q
Q
q
1 0 0 1 345.3648 3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Left) Tj T* ET
Q
Q
q
1 J
1 j
0 0 0 RG
.25 w
n 0 72 m 469.8898 72 l S
n 0 54 m 469.8898 54 l S
n 0 36 m 469.8898 36 l S
n 0 18 m 469.8898 18 l S
n 104.4199 0 m 104.4199 90 l S
n 339.3648 0 m 339.3648 90 l S
n 0 90 m 469.8898 90 l S
n 0 0 m 469.8898 0 l S
n 0 0 m 0 90 l S
n 469.8898 0 m 469.8898 90 l S
Q
Q
q
1 0 0 1 62.69291 142.0236 cm
Q
q
1 0 0 1 62.69291 109.0236 cm
q
BT 1 0 0 1 0 3.5 Tm 21 TL /F2 17.5 Tf 0 0 0 rg (Reference links) Tj T* ET
Q
Q
q
1 0 0 1 62.69291 97.02362 cm
Q
q
1 0 0 1 62.69291 97.02362 cm
Q
q
1 0 0 1 62.69291 85.02362 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Video "What is a stack data structure") Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 79.02362 cm
Q
 
endstream
endobj
33 0 obj
<<
/Length 1087
>>
stream
1 0 0 1 0 0 cm  BT /F1 12 Tf 14.4 TL ET
q
1 0 0 1 62.69291 753.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Wikibook - Fundamentals of data structures - Stacks) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 747.0236 cm
Q
q
1 0 0 1 62.69291 735.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Infix to postfix algorithm video) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 729.0236 cm
Q
q
1 0 0 1 62.69291 717.0236 cm
0 0 0 rg
BT /F1 10 Tf 12 TL ET
q
1 0 0 1 6 -3 cm
q
0 0 0 rg
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL 10.5 0 Td (\177) Tj T* -10.5 0 Td ET
Q
Q
q
1 0 0 1 23 -3 cm
q
0 0 .501961 rg
0 0 .501961 RG
BT 1 0 0 1 0 2 Tm /F1 10 Tf 12 TL (Dijkstra's shunting-yard algorithm explained) Tj T* ET
Q
Q
q
Q
Q
q
1 0 0 1 62.69291 717.0236 cm
Q
 
endstream
endobj
34 0 obj
<<
/Nums [ 0 35 0 R 1 36 0 R 2 37 0 R 3 38 0 R ]
>>
endobj
35 0 obj
<<
/S /D /St 1
>>
endobj
36 0 obj
<<
/S /D /St 2
>>
endobj
37 0 obj
<<
/S /D /St 3
>>
endobj
38 0 obj
<<
/S /D /St 4
>>
endobj
xref
0 39
0000000000 65535 f 
0000000073 00000 n 
0000000145 00000 n 
0000000252 00000 n 
0000000364 00000 n 
0000000469 00000 n 
0000000674 00000 n 
0000000899 00000 n 
0000001128 00000 n 
0000001247 00000 n 
0000001452 00000 n 
0000001568 00000 n 
0000001779 00000 n 
0000001998 00000 n 
0000002194 00000 n 
0000002433 00000 n 
0000002684 00000 n 
0000002880 00000 n 
0000003086 00000 n 
0000003325 00000 n 
0000003431 00000 n 
0000003726 00000 n 
0000003800 00000 n 
0000003911 00000 n 
0000004037 00000 n 
0000004190 00000 n 
0000004321 00000 n 
0000004450 00000 n 
0000004572 00000 n 
0000004689 00000 n 
0000004769 00000 n 
0000013464 00000 n 
0000019760 00000 n 
0000030497 00000 n 
0000031636 00000 n 
0000031704 00000 n 
0000031738 00000 n 
0000031772 00000 n 
0000031806 00000 n 
trailer
<<
/ID 
[<ca9b6e4a9763b4b512572962889b2787><ca9b6e4a9763b4b512572962889b2787>]
% ReportLab generated PDF document -- digest (http://www.reportlab.com)

/Info 20 0 R
/Root 19 0 R
/Size 39
>>
startxref
31840
%%EOF
